@copyright 2020 SigScale Global Inc.
@version %VERSION%
@title %DESCRIPTION%
@doc This application implements an SNMP agent simulator for load testing.

==Introduction==
This application is intended to be used to benchmark SNMP managers used
for the collection of alarms. A traffic target in TPS (transactions per
second) may be defined and statistics are kept for each session.

The SNMP agent simulator implements the
Alarm Management Information Base (MIB)
(<a href="https://tools.ietf.org/html/rfc3877">RFC3877</a>).
An alarm model is created to define the alarms which may be sent to the
manager. Alarms are then added to the active alarm table which causes an
SNMP notification to be sent to the manager(s). Active alarms may be
cleared which also causes a notification.

==Installation==
Before starting the application for the first time, {@link //mnesia/mnesia. mnesia}
should be initialized. Create a schema and start mnesia on all nodes
where the application {@link //snmp_simulator. snmp_simulator} application will run.

The following command will initialize {@link //snmp_simulator. snmp_simulator}.

   ```
   (snmp_simulator@h)1> snmp_simulator_app:install().
   {ok, []}
   '''

==Operation==

==Configuration==
SNMP agent configuration is described in the {@link //snmp. snmp} application
documentation.

=== Create Directories ===
In the following examples we will assume we are logged in as the user `otpuser'
and working from the  home directory of `otpuser'. Create a subdirectory to
contain the configuration files of the agent and another for the working files.

```
# sudo su - otpuser
$ mkdir -p snmp/agent/conf
$ mkdir -p snmp/agent/db
'''

=== Agent SNMP Engine ID ===
A value for SnmpEngineID should be generated using the specific algorithm
defined in SNMP-FRAMEWORK-MIB (RFC3411). Use the
{@link //sigscale_mib/sigscale_snmp_lib:engine_id/0. sigscale_snmp_lib:engine_id/0}
utility to get a compliant value for your host:

```
1> SnmpEngineID = sigscale_snmp_lib:engine_id().
[128,0,196,210,3,10,79,67,123,9,88]
'''

=== Agent Information ===
The `snmp/agent/conf/agent.conf' file defines the information for this agent.

```
{intAgentIpAddress, [127,0,0,1]}.
{intAgentUDPPort, 4000}.
{snmpEngineID, [128,0,196,210,3,10,79,67,123,9,88]}.
{snmpEngineMaxMessageSize, 484}.
'''

=== System Information ===
The `snmp/agent/conf/standard.conf' file defines the information for the
system being managed.

```
{sysName, "snmp_simulator"}.
{sysDescr, "SigScale SNMP Simulator"}.
{sysContact, "info@sigscale.com"}.
{sysLocation, "SigScale Lab"}.
{sysObjectID, [1,3,6,1,4,1,50386,1,2]}.
{sysServices, 72}.
{snmpEnableAuthenTraps, enabled}.
'''

=== Community ===
The `snmp/agent/conf/community.conf' file defines the communities for the
system being managed. It is required for SNMPv1 or SNMPv2c.

```
{"public", "public", "initial", "", ""}.
'''

=== MIB Views ===
The `snmp/agent/conf/vacm.conf' file defines the views for VACM. This
determines what access rights users have to areas of the MIBS. Here we
will define access rights for the community defined above.

```
{vacmSecurityToGroup, v2c, "initial", "initial"}.
{vacmSecurityToGroup, usm, "initial", "initial"}.
{vacmAccess, "initial", "", any, noAuthNoPriv, exact, "restricted", "", "restricted"}.
{vacmAccess, "initial", "", usm, authNoPriv, exact, "internet", "internet", "internet"}.
{vacmAccess, "initial", "", usm, authPriv, exact, "internet", "internet", "internet"}.
{vacmViewTreeFamily, "internet", [1,3,6,1], included, null}.
{vacmViewTreeFamily, "restricted", [1,3,6,1], included, null}.
'''

=== User Based Security Model (USM) ===
With SNMPv3 the agent and manager may share a secret for authentication using
either MD5 or SHA. RFC2274 specifies an algorithm to generate a localized key
using a passphrase and SnmpEngineID. This localized authentication key is defined
in the agent's and manager's `usm.conf' file.

==== Generating Localized Keys ====
The snmp application can be used to generate localized keys.

```
1> application:start(crypto).
ok
2> Passphrase1 = "The quick brown fox jumps over the lazy dog.",
2> snmp:passwd2localized_key(md5, Passphrase1, SnmpEngineID).
[208,83,160,236,200,189,161,177,179,212,205,99,18,6,165,94]
3> Passphrase2 = "Pack my box with five dozen liquor jugs.",
3> snmp:passwd2localized_key(md5, Passphrase2, SnmpEngineID).
[218,229,119,149,79,70,163,253,62,186,166,60,33,150,213,143]
'''

==== Security Data ====
The `snmp/agent/conf/usm.conf' file defines the security data for each user
of an agent. Here we have chosen MD5 based authentication and DES encryption
privacy.

```
{[128,0,196,210,3,10,79,67,123,9,88], "simple_user", "initial", zeroDotZero,
    usmHMACMD5AuthProtocol, "", "",
    usmDESPrivProtocol, "", "", "",
    [208,83,160,236,200,189,161,177,179,212,205,99,18,6,165,94],
    [218,229,119,149,79,70,163,253,62,186,166,60,33,150,213,143]}.
'''

==== Notifications ====
The `snmp/agent/conf/notify.conf' file defines management targets which
should receive notifications.

```
{"Manager", "tag1", trap}.
'''

=== Application Environment ===
The `sys.config' system configuration file used when we start the node
to run the agent should include the following so the agent application
can find it's configuration files and persistent database.

```
[{snmp,
        [{agent,
            [{config, [{dir, "snmp/agent/conf/"}]},
            {db_dir, "snmp/agent/db/"}]}]}].
'''

== Validating Configuration ==
The SNMP agent configuration may be validated using the SNMP application's
manager in {@link //snmp/snmpm. snmpm}.

=== Create Directories ===
Create a subdirectory to contain the configuration files of the manager
and another for the working files.

```
# sudo su - otpuser
$ mkdir -p snmp/manager/conf
$ mkdir -p snmp/manager/db
'''

=== Manager Information ===
The `snmp/manager/conf/manager.conf' file defines the information for this manager. 

```
{port, 5000}.
{address, [127,0,0,1]}.
{engine_id, [128,0,196,210,5,59,255,216,62,179,105,87,222,205,201,17,19,33,49,179,111,106,4,57,141,95,131,88,215,100,79,69]}.
{max_message_size, 484}.
'''

=== Users ===
The `snmp/manager/conf/users.conf' file defines the manager users. A manager
user is implemented in a callback module. Here we will define a simple manager
user using the default module.

```
{"simple_user", snmpm_user_default, undefined}.
'''

=== Agents ===
The `snmp/manager/conf/agents.conf' file defines the agents the manager will use. 

```
{"simple_user", "simulator", "public", [127,0,0,1], 4000,
    [128,0,196,210,3,10,79,67,123,9,88],
    infinity, 484, v3, usm, "initial", authPriv}.
'''

==== Security Data ====
The `snmp/manager/conf/usm.conf' file defines the security data for each
manager user on each agent.

```
{[128,0,196,210,3,10,79,67,123,9,88], "simple_user", "initial",
    usmHMACMD5AuthProtocol, [208,83,160,236,200,189,161,177,179,212,205,99,18,6,165,94],
    usmDESPrivProtocol, [218,229,119,149,79,70,163,253,62,186,166,60,33,150,213,143]}.
'''

```
1> [User] = snmpm:which_users().
["simple_user"]
2> [Agent] = snmpm:which_agents().
["simulator"]
3> {value, SysName} = snmpa:name_to_oid(sysName).
3> {ok, _, _} = snmpm:sync_get(User, Agent, [SysName ++ [0]]).
'''

